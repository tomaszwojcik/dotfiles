set nocompatible

call pathogen#infect()

syntax on
filetype plugin indent on

" Colors
colorscheme spacedust
set background=dark
if has("gui_running")
  set guifont=Monaco:h14
  " Weird thing that turning off right scroll bar is 'r' and turning off left
  " is capital 'L'
  set guioptions-=r
  set guioptions-=L
  set guioptions-=a
else
  set t_Co=256
endif

set autoread
set nocompatible
let g:indentLine_noConcealCursor = 1

" Speedup tweaks
set synmaxcol=160
set ttyfast
set ttyscroll=3
set nolazyredraw

set cursorline
set colorcolumn=80

set clipboard=unnamed
" if has('unnamedplus')
"   set clipboard=unnamed,unnamedplus
" endif

cnoremap %% <C-R>=expand('%:h').'/'<cr>
let g:agprg = 'ag --nogroup --nocolor --column'

let mapleader = ','

let NERDTreeShowHidden=1

" Movement stuff
onoremap in :<c-u>normal! f(vi(<cr>

" Run tests
let g:rspec_runner = "os_x_iterm"
let g:rspec_command = "Dispatch bundle exec rspec {spec}"

map <leader>t :w<CR>:call RunCurrentTest<CR>
map <leader>l :w<CR>:call RunCurrentLineInTest()<CR>

" Vim
map <leader>/ :so ~/.vimrc<cr>:noh<cr>
map <leader>e :e %%

" Tabular
nmap <leader>= :Tab /=<CR>
vmap <leader>= :Tab /=<CR>
nmap <leader>{ :Tab /{<CR>
vmap <leader>{ :Tab /{<CR>
nmap <leader>: :Tab /:\zs<CR>
vmap <leader>: :Tab /:\zs<CR>

" Higlight unwanted spaces
set listchars=tab:â–¸\ ,trail:.
set list

" More convinient window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Retag
map <leader>R :call Retag()<CR>

" Ctrl-P
map <leader>P :ClearAllCtrlPCaches<CR>

" Emmet
map <leader>o <C-y>,

" Fix syntax highlighting
noremap <leader>` <Esc>:syntax sync fromstart<CR>
inoremap <leader>` <C-o>:syntax sync fromstart<CR>

" Search options
set hlsearch
set incsearch
set ignorecase smartcase

" Flexible windows
set winwidth=80
set winheight=8
set winminheight=8
set winheight=999

set wildmode=list:longest
set backspace=2
set laststatus=2
" Git status line
set statusline=%<%f%m\ %r\ %=%l,%c\ %p%%\ %y\ %{fugitive#statusline()}

" vim-rubocop
let g:vimrubocop_keymap = 0
nmap <Leader>r :RuboCop<CR>
" nnoremap <leader>r :!rubocop %<cr>

" Remove annoying warning when trying to move to the next/previous buffer and
" there are changes in the current buffer
set hidden

hi SignColumn ctermbg=7 guibg=#041e23
hi GitGutterAdd ctermbg=7 ctermfg=2 guibg=#041e23 guifg=#7ca000
hi GitGutterDelete ctermbg=7 ctermfg=1 guibg=#041e23 guifg=#ed000e
hi GitGutterChange ctermbg=7 ctermfg=3 guibg=#041e23 guifg=#ba8a00
hi GitGutterChangeDelete ctermbg=7 ctermfg=1 guibg=#041e23 guifg=#ed000e


let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_modified = '*'
let g:gitgutter_sign_modified_removed = '!'

set tags=tags;/
" Don't pollute dirs with swap and temporary files
set backupdir=~/.vim_bck
set directory=~/.vim_tmp

" Set pwd to the current dir
" autochdir can fail with some plugins
" set autochdir
" Alternatively use this line if autochdir fails:
" autocmd BufEnter * silent! lcd %:p:h

" Intendation
set autoindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

filetype plugin indent on

augroup dev_files
  autocmd!
  au BufRead,BufNewFile *.rabl setf ruby
  au BufRead,BufNewFile Podfile set filetype=ruby
  au FileType java,python,cs,javascript set sw=4 sts=4 et
augroup END


" Enable line numbers and toggling between absolute and relative numbering
set number
function! NumberToggle()
  if(&relativenumber == 1)
    let &number = 1
    let &relativenumber = 0
  else
    let &number = 0
    let &relativenumber = 1
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>

" Show higlighting groups for current word (http://vimcasts.org/episodes/creating-colorschemes-for-vim/)
nmap <C-S-G> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

function! Retag()
  silent :!ctags -R
  echom 'Retagged!'
endfunc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUN TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap  <leader>t :w<cr>:call RunCurrentTest()<cr>
nnoremap  <leader>l :w<cr>:call RunCurrentLineInTest()<cr>

function! RunCurrentTest()
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFile()

    if match(expand('%'), '\.feature$') != -1
      call SetTestRunner("!cucumber")
      exec g:bjo_test_runner g:bjo_test_file
    elseif match(expand('%'), '_spec\.rb$') != -1
      call SetTestRunner("Dispatch bundle exec rspec -f d")
      exec g:bjo_test_runner g:bjo_test_file
    else
      call SetTestRunner("!test")
      exec g:bjo_test_runner g:bjo_test_file
    endif
  else
    exec g:bjo_test_runner g:bjo_test_file
  endif
endfunction

function! SetTestRunner(runner)
  let g:bjo_test_runner=a:runner
endfunction

function! RunCurrentLineInTest()
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFileWithLine()
  end

  exec "Dispatch bundle exec rspec -f d" g:bjo_test_file . ":" . g:bjo_test_file_line
endfunction

function! SetTestFile()
  let g:bjo_test_file=@%
endfunction

function! SetTestFileWithLine()
  let g:bjo_test_file=@%
  let g:bjo_test_file_line=line(".")
endfunction
" }}}
