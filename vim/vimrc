set nocompatible

call pathogen#infect()
call pathogen#helptags()

syntax on
filetype plugin indent on
colorscheme jellybeans

set cursorline

" MacVim specific options
set clipboard=unnamed

cnoremap %% <C-R>=expand('%:h').'/'<cr>
let g:agprg = 'ag --nogroup --nocolor --column'

let mapleader = ','
map <leader>e :e %%

" Run tests
map <leader>t :w<CR>:call RunCurrentTest()<CR>
map <leader>l :w<CR>:call RunCurrentLineInTest()<CR>

" More convinient window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Search options
set hlsearch
set incsearch
set ignorecase smartcase

" Flexible windows
set winwidth=84
set winheight=8
set winminheight=8
set winheight=999

" Git status line
set statusline=%<%f%m\ %r\ %=%l,%c\ %p%%\ %y\ %{fugitive#statusline()}

" vim-ruby-debugger options
let g:ruby_debugger_progname = 'mvim'
let g:ruby_debugger_debug_mode = 1

" Remove annoying warning when trying to move to the next/previous buffer and
" there are changes in the current buffer
set hidden

" Set vim-gitgutter colors and symbols
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_modified = '*'
let g:gitgutter_sign_modified_removed = '!'

highlight GitGutterChange ctermfg=yellow

" :E invokes :e[dit] with prefixed path
" Assume that we have started vim in the work/ dir and then we have navigated to 
" the test/ subdir. :e <name> will invoke edit for work/<name>, however :E will invoke
" edit for work/test/<name>
command! -nargs=1 E call EditAtCurrentPath(<f-args>)

function! EditAtCurrentPath(filename)
    let l:path=expand('%:p:h').'/'.a:filename
    execute 'edit' l:path
endfunction

" Don't pollute dirs with swap and temporary files
set backupdir=~/.vim_bck
set directory=~/.vim_tmp

" Set pwd to the current dir
" autochdir can fail with some plugins
" set autochdir
" Alternatively use this line if autochdir fails:
" autocmd BufEnter * silent! lcd %:p:h

" Intendation
set expandtab
set shiftwidth=2
set softtabstop=2

" Intendation
if has("autocmd")
  filetype on
  autocmd FileType ruby,eruby setlocal ts=2 sts=2 sw=2 noexpandtab
end

" Enable line numbers and toggling between absolute and relative numbering
" (C-n)
set number
function! NumberToggle()
	if(&relativenumber == 1)
		let &number = 1
                let &relativenumber = 0
	else
		let &number = 0
                let &relativenumber = 1
        endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Test-running stuff
" stolen from Ben Orenstein's vimrc
" (https://github.com/r00k/dotfiles/blob/master/vimrc)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RunCurrentTest()
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFile()

    if match(expand('%'), '\.feature$') != -1
      call SetTestRunner("!bundle exec cucumber")
      exec g:bjo_test_runner g:bjo_test_file
    elseif match(expand('%'), '_spec\.rb$') != -1
      call SetTestRunner("!bundle exec rspec -f d")
      exec g:bjo_test_runner g:bjo_test_file
    else
      call SetTestRunner("!ruby -Itest")
      exec g:bjo_test_runner g:bjo_test_file
    endif
  else
    exec g:bjo_test_runner g:bjo_test_file
  endif
endfunction

function! SetTestRunner(runner)
  let g:bjo_test_runner=a:runner
endfunction

function! RunCurrentLineInTest()
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFileWithLine()
  end

  exec "!bundle exec rspec -f d" g:bjo_test_file . ":" . g:bjo_test_file_line
endfunction

function! SetTestFile()
  let g:bjo_test_file=@%
endfunction

function! SetTestFileWithLine()
  let g:bjo_test_file=@%
  let g:bjo_test_file_line=line(".")
endfunction
